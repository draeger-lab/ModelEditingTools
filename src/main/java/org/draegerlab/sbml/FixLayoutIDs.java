/**
 *
 */
package org.draegerlab.sbml;

import java.io.File;
import java.io.IOException;

import javax.xml.stream.XMLStreamException;

import org.sbml.jsbml.ListOf;
import org.sbml.jsbml.Model;
import org.sbml.jsbml.NamedSBase;
import org.sbml.jsbml.Reaction;
import org.sbml.jsbml.SBMLDocument;
import org.sbml.jsbml.SBMLError;
import org.sbml.jsbml.SBMLError.SEVERITY;
import org.sbml.jsbml.SBMLReader;
import org.sbml.jsbml.SpeciesReference;
import org.sbml.jsbml.TidySBMLWriter;
import org.sbml.jsbml.ext.layout.Layout;
import org.sbml.jsbml.ext.layout.LayoutModelPlugin;
import org.sbml.jsbml.ext.layout.ReactionGlyph;
import org.sbml.jsbml.ext.layout.SpeciesGlyph;
import org.sbml.jsbml.ext.layout.SpeciesReferenceGlyph;
import org.sbml.jsbml.ext.layout.TextGlyph;

/**
 * Reads a model with a layout generated by EscherConverter and tries to connect
 * the layout to a main model with id prefixes, such as "M_" etc.
 *
 * @author draeger
 *
 */
public class FixLayoutIDs {

  /**
   * This little script takes care of differences in the ID naming conventions
   * between Escher and BiGG by adding prefixes ({@code M_},{@code R_}, or
   * {@code G_}) where needed and also correcting other cross references.
   *
   * @param args
   *        This method requires as input the paths to three files:
   *        1) The result from a conversion Escher JSON to SBML
   *        2) The model in which the layout is to be inserted.
   *        3) The output file
   * @throws IOException
   * @throws XMLStreamException
   */
  public static void main(String[] args) throws XMLStreamException, IOException {
    SBMLDocument layoutDoc = SBMLReader.read(new File(args[0]));
    SBMLDocument doc = SBMLReader.read(new File(args[1]));
    Model m = doc.getModel();
    LayoutModelPlugin layout = (LayoutModelPlugin) layoutDoc.getModel().getPlugin("layout");
    m.addPlugin("layout", layout.clone());
    Layout l = ((LayoutModelPlugin) m.getPlugin("layout")).getListOfLayouts().get(0);
    int count = 0;
    for (SpeciesGlyph sg : l.getListOfSpeciesGlyphs()) {
      String ref = sg.getSpecies();
      char pref = 'M';
      if (!ref.startsWith(pref + "_")) {
        sg.setSpecies(createNewReference(ref, pref));
        System.out.println(++count + ".\t" + ref + " -> " + sg.getSpecies());
      }
    }
    count = 0;
    for (TextGlyph tg : l.getListOfTextGlyphs()) {
      if (tg.isSetOriginOfText()) {
        if (tg.getOriginOfTextInstance() == null) {
          String ref = tg.getOriginOfText();
          char prefixes[] = {'M', 'R', 'G'};
          for (char pref : prefixes) {
            NamedSBase sbase = m.findNamedSBase(createNewReference(ref, pref));
            if (sbase != null) {
              tg.setOriginOfText(sbase.getId());
              System.out.println(++count + ".\t" + ref + " -> " + sbase.getId());
              break;
            }
          }
        }
      }
    }
    count = 0;
    for (ReactionGlyph rg : l.getListOfReactionGlyphs()) {
      if (rg.isSetReaction() && (rg.getReactionInstance() == null)) {
        String ref = rg.getReaction();
        NamedSBase sbase = m.findNamedSBase(createNewReference(ref, 'R'));
        if (sbase != null) {
          rg.setReaction(sbase.getId());
          System.out.println(++count + ".\t" + ref + " -> " + sbase.getId());
        } else {
          System.err.println("No corresponding reaction with id '" + rg.getReaction() + "' could be found for reaction glyph '" + rg.getId() + "'");
          continue;
        }
      }
      if (rg.isSetListOfSpeciesReferenceGlyphs()) {
        for (SpeciesReferenceGlyph srg : rg.getListOfSpeciesReferenceGlyphs()) {
          if (srg.isSetSpeciesReference()) {
            String ref = srg.getSpeciesReference();
            NamedSBase sbase = m.findNamedSBase(ref);
            if (sbase == null) {
              Reaction r = (Reaction) rg.getReactionInstance();
              NamedSBase other = layoutDoc.getModel().findNamedSBase(ref);
              if ((other != null) && (other instanceof SpeciesReference)) {
                SpeciesReference sr = (SpeciesReference) other;
                if (sr.isSetSpecies()) {
                  //System.out.println("Found " + sr.getSpecies() + " for " + ref);
                  if (ref.contains("_reactant_")) {
                    setId(r.getListOfReactants(), sr.getSpecies(), ref);
                  } else if (ref.contains("_product_")) {
                    setId(r.getListOfProducts(), sr.getSpecies(), ref);
                  }
                }
              }
            }
          }
        }
      }
    }
    System.out.println(args[1]);
    TidySBMLWriter.write(doc, new File(args[2]), ' ', (short) 2);
    doc.checkConsistencyOffline();
    for (SBMLError e : doc.getListOfErrors().getErrorsBySeverity(SEVERITY.ERROR)) {
      System.out.println(e.getMessage());
    }
  }

  /**
   *
   * @param listOfParticipants
   * @param species
   * @param id
   */
  private static void setId(ListOf<SpeciesReference> listOfParticipants,
    String species, String id) {
    species = createNewReference(species, 'M');
    for (SpeciesReference sr : listOfParticipants) {
      if (sr.getSpecies().equals(species)) {
        sr.setId(id);
        System.out.println("Setting id to " + id + " for speciesReference to " + species);
        break;
      }
    }
  }

  /**
   *
   * @param ref
   * @param pref
   * @return
   */
  private static String createNewReference(String ref, char pref) {
    String newRef;
    if (ref.charAt(0) == '_') {
      newRef = pref + ref;
    } else {
      newRef = pref + "_" + ref;
    }
    return newRef;
  }
}
